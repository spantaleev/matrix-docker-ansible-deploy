# vim:ft=yaml
## Server ##

# The domain name of the server, with optional explicit port.
# This is used by remote servers to connect to this server,
# e.g. matrix.org, localhost:8080, etc.
# This is also the last part of your UserID.
server_name: "{{ matrix_domain }}"

# When running as a daemon, the file to store the pid in
pid_file: /homeserver.pid

# CPU affinity mask. Setting this restricts the CPUs on which the
# process will be scheduled. It is represented as a bitmask, with the
# lowest order bit corresponding to the first logical CPU and the
# highest order bit corresponding to the last logical CPU. Not all CPUs
# may exist on a given system but a mask may specify more CPUs than are
# present.
#
# For example:
#    0x00000001  is processor #0,
#    0x00000003  is processors #0 and #1,
#    0xFFFFFFFF  is all processors (#0 through #31).
#
# Pinning a Python process to a single CPU is desirable, because Python
# is inherently single-threaded due to the GIL, and can suffer a
# 30-40% slowdown due to cache blow-out and thread context switching
# if the scheduler happens to schedule the underlying threads across
# different cores. See
# https://www.mirantis.com/blog/improve-performance-python-programs-restricting-single-cpu/.
#
# This setting requires the affinity package to be installed!
#
# cpu_affinity: 0xFFFFFFFF

# The path to the web client which will be served at /_matrix/client/
# if 'webclient' is configured under the 'listeners' configuration.
#
# web_client_location: "/path/to/web/root"

# The public-facing base URL that clients use to access this HS
# (not including _matrix/...). This is the same URL a user would
# enter into the 'custom HS URL' field on their client. If you
# use synapse with a reverse proxy, this should be the URL to reach
# synapse via the proxy.
public_baseurl: https://{{ matrix_server_fqn_matrix }}/

# Set the soft limit on the number of file descriptors synapse can use
# Zero is used to indicate synapse should set the soft limit to the
# hard limit.
soft_file_limit: 0

# Set to false to disable presence tracking on this homeserver.
use_presence: {{ matrix_synapse_use_presence|to_json }}

# The GC threshold parameters to pass to `gc.set_threshold`, if defined
# gc_thresholds: [700, 10, 10]

# Set the limit on the returned events in the timeline in the get
# and sync operations. The default value is -1, means no upper limit.
# filter_timeline_limit: 5000

# Whether room invites to users on this server should be blocked
# (except those sent by local server admins). The default is False.
# block_non_admin_invites: True

# Restrict federation to the following whitelist of domains.
# N.B. we recommend also firewalling your federation listener to limit
# inbound federation traffic as early as possible, rather than relying
# purely on this application-layer restriction.  If not specified, the
# default is to whitelist everything.
#
# federation_domain_whitelist:
#  - lon.example.com
#  - nyc.example.com
#  - syd.example.com
{% if matrix_synapse_federation_domain_whitelist is not none %}
{# Cannot use `|to_nice_yaml` here, as an empty list does not get serialized properly by it. #}
federation_domain_whitelist: {{ matrix_synapse_federation_domain_whitelist|to_json }}
{% endif %}

# List of ports that Synapse should listen on, their purpose and their
# configuration.
#
# Options for each listener include:
#
#   port: the TCP port to bind to
#
#   bind_addresses: a list of local addresses to listen on. The default is
#       'all local interfaces'.
#
#   type: the type of listener. Normally 'http', but other valid options are:
#       'manhole' (see docs/manhole.md),
#       'metrics' (see docs/metrics-howto.rst),
#       'replication' (see docs/workers.rst).
#
#   tls: set to true to enable TLS for this listener. Will use the TLS
#       key/cert specified in tls_private_key_path / tls_certificate_path.
#
#   x_forwarded: Only valid for an 'http' listener. Set to true to use the
#       X-Forwarded-For header as the client IP. Useful when Synapse is
#       behind a reverse-proxy.
#
#   resources: Only valid for an 'http' listener. A list of resources to host
#       on this port. Options for each resource are:
#
#       names: a list of names of HTTP resources. See below for a list of
#           valid resource names.
#
#       compress: set to true to enable HTTP comression for this resource.
#
#   additional_resources: Only valid for an 'http' listener. A map of
#        additional endpoints which should be loaded via dynamic modules.
#
# Valid resource names are:
#
#   client: the client-server API (/_matrix/client). Also implies 'media' and
#       'static'.
#
#   consent: user consent forms (/_matrix/consent). See
#       docs/consent_tracking.md.
#
#   federation: the server-server API (/_matrix/federation). Also implies
#       'media', 'keys', 'openid'
#
#   keys: the key discovery API (/_matrix/keys).
#
#   media: the media API (/_matrix/media).
#
#   metrics: the metrics interface. See docs/metrics-howto.rst.
#
#   openid: OpenID authentication.
#
#   replication: the HTTP replication API (/_synapse/replication). See
#       docs/workers.rst.
#
#   static: static resources under synapse/static (/_matrix/static). (Mostly
#       useful for 'fallback authentication'.)
#
#   webclient: A web client. Requires web_client_location to be set.
#
listeners:
{% if matrix_synapse_metrics_enabled %}
  - type: metrics
    port: {{ matrix_synapse_metrics_port }}
    bind_addresses:
      - '0.0.0.0'
{% endif %}

{% if matrix_synapse_federation_enabled and matrix_synapse_tls_federation_listener_enabled %}
  # TLS-enabled listener: for when matrix traffic is sent directly to synapse.
  - port: 8448
    tls: true
    bind_addresses: ['::']
    type: http
    x_forwarded: false

    resources:
      - names: [federation]
        compress: false
{% endif %}

  # Unsecure HTTP listener (Client API): for when matrix traffic passes through a reverse proxy
  # that unwraps TLS.
  - port: 8008
    tls: false
    bind_addresses: ['::']
    type: http
    x_forwarded: true

    resources:
      - names: [client]
        compress: false

{% if matrix_synapse_federation_enabled %}
  # Unsecure HTTP listener (Federation API): for when matrix traffic passes through a reverse proxy
  # that unwraps TLS.
  - port: 8048
    tls: false
    bind_addresses: ['::']
    type: http
    x_forwarded: true

    resources:
      - names: [federation]
        compress: false
{% endif %}

  # Turn on the twisted ssh manhole service on localhost on the given
  # port.
  # - port: 9000
  #   bind_addresses: ['::1', '127.0.0.1']
  #   type: manhole

# Homeserver blocking
#
# How to reach the server admin, used in ResourceLimitError
# admin_contact: 'mailto:admin@server.com'
#
# Global block config
#
# hs_disabled: False
# hs_disabled_message: 'Human readable reason for why the HS is blocked'
# hs_disabled_limit_type: 'error code(str), to help clients decode reason'
#
# Monthly Active User Blocking
#
# Enables monthly active user checking
# limit_usage_by_mau: False
# max_mau_value: 50
# mau_trial_days: 2
#
# If enabled, the metrics for the number of monthly active users will
# be populated, however no one will be limited. If limit_usage_by_mau
# is true, this is implied to be true.
# mau_stats_only: False
#
# Sometimes the server admin will want to ensure certain accounts are
# never blocked by mau checking. These accounts are specified here.
#
# mau_limit_reserved_threepids:
# - medium: 'email'
#   address: 'reserved_user@example.com'
#
# Room searching
#
# If disabled, new messages will not be indexed for searching and users
# will receive errors when searching for messages. Defaults to enabled.
# enable_search: true


## TLS ##

# PEM-encoded X509 certificate for TLS.
# This certificate, as of Synapse 1.0, will need to be a valid and verifiable
# certificate, signed by a recognised Certificate Authority.
#
# See 'ACME support' below to enable auto-provisioning this certificate via
# Let's Encrypt.
#
tls_certificate_path: {{ matrix_synapse_tls_certificate_path|to_json }}

# PEM-encoded private key for TLS
tls_private_key_path: {{ matrix_synapse_tls_private_key_path|to_json }}

# ACME support: This will configure Synapse to request a valid TLS certificate
# for your configured `server_name` via Let's Encrypt.
#
# Note that provisioning a certificate in this way requires port 80 to be
# routed to Synapse so that it can complete the http-01 ACME challenge.
# By default, if you enable ACME support, Synapse will attempt to listen on
# port 80 for incoming http-01 challenges - however, this will likely fail
# with 'Permission denied' or a similar error.
#
# There are a couple of potential solutions to this:
#
#  * If you already have an Apache, Nginx, or similar listening on port 80,
#    you can configure Synapse to use an alternate port, and have your web
#    server forward the requests. For example, assuming you set 'port: 8009'
#    below, on Apache, you would write:
#
#    ProxyPass /.well-known/acme-challenge http://localhost:8009/.well-known/acme-challenge
#
#  * Alternatively, you can use something like `authbind` to give Synapse
#    permission to listen on port 80.
#
acme:
    # ACME support is disabled by default. Uncomment the following line
    # (and tls_certificate_path and tls_private_key_path above) to enable it.
    #
    # enabled: true

    # Endpoint to use to request certificates. If you only want to test,
    # use Let's Encrypt's staging url:
    #     https://acme-staging.api.letsencrypt.org/directory
    #
    # url: https://acme-v01.api.letsencrypt.org/directory

    # Port number to listen on for the HTTP-01 challenge. Change this if
    # you are forwarding connections through Apache/Nginx/etc.
    #
    # port: 80

    # Local addresses to listen on for incoming connections.
    # Again, you may want to change this if you are forwarding connections
    # through Apache/Nginx/etc.
    #
    # bind_addresses: ['::', '0.0.0.0']

    # How many days remaining on a certificate before it is renewed.
    #
    # reprovision_threshold: 30

# List of allowed TLS fingerprints for this server to publish along
# with the signing keys for this server. Other matrix servers that
# make HTTPS requests to this server will check that the TLS
# certificates returned by this server match one of the fingerprints.
#
# Synapse automatically adds the fingerprint of its own certificate
# to the list. So if federation traffic is handled directly by synapse
# then no modification to the list is required.
#
# If synapse is run behind a load balancer that handles the TLS then it
# will be necessary to add the fingerprints of the certificates used by
# the loadbalancers to this list if they are different to the one
# synapse is using.
#
# Homeservers are permitted to cache the list of TLS fingerprints
# returned in the key responses up to the "valid_until_ts" returned in
# key. It may be necessary to publish the fingerprints of a new
# certificate and wait until the "valid_until_ts" of the previous key
# responses have passed before deploying it.
#
# You can calculate a fingerprint from a given TLS listener via:
# openssl s_client -connect $host:$port < /dev/null 2> /dev/null |
#   openssl x509 -outform DER | openssl sha256 -binary | base64 | tr -d '='
# or by checking matrix.org/federationtester/api/report?server_name=$host
#
tls_fingerprints: []
# tls_fingerprints: [{"sha256": "<base64_encoded_sha256_fingerprint>"}]



# Database configuration
database:
  # The database engine name
  name: "psycopg2"
  args:
    user: {{ matrix_synapse_database_user|to_json }}
    password: {{ matrix_synapse_database_password }}
    database: "{{ matrix_synapse_database_database }}"
    host: "{{ matrix_synapse_database_host }}"
    cp_min: 5
    cp_max: 10

# Number of events to cache in memory.
event_cache_size: "{{ matrix_synapse_event_cache_size }}"



# A yaml python logging config file
log_config: "/data/{{ matrix_server_fqn_matrix }}.log.config"


## Ratelimiting ##

# Number of messages a client can send per second
rc_messages_per_second: {{ matrix_synapse_rc_messages_per_second }}

# Number of message a client can send before being throttled
rc_message_burst_count: {{ matrix_synapse_rc_message_burst_count }}

# The federation window size in milliseconds
federation_rc_window_size: 1000

# The number of federation requests from a single server in a window
# before the server will delay processing the request.
federation_rc_sleep_limit: 10

# The duration in milliseconds to delay processing events from
# remote servers by if they go over the sleep limit.
federation_rc_sleep_delay: 500

# The maximum number of concurrent federation requests allowed
# from a single server
federation_rc_reject_limit: 50

# The number of federation requests to concurrently process from a
# single server
federation_rc_concurrent: 3



# Directory where uploaded images and attachments are stored.
media_store_path: "/matrix-media-store-parent/{{ matrix_synapse_media_store_directory_name }}"

# Media storage providers allow media to be stored in different
# locations.
# media_storage_providers:
# - module: file_system
#   # Whether to write new local files.
#   store_local: false
#   # Whether to write new remote media
#   store_remote: false
#   # Whether to block upload requests waiting for write to this
#   # provider to complete
#   store_synchronous: false
#   config:
#     directory: /mnt/some/other/directory

# Directory where in-progress uploads are stored.
uploads_path: "/matrix-run/uploads"

# The largest allowed upload size in bytes
max_upload_size: "{{ matrix_synapse_max_upload_size_mb }}M"

# Maximum number of pixels that will be thumbnailed
max_image_pixels: "32M"

# Whether to generate new thumbnails on the fly to precisely match
# the resolution requested by the client. If true then whenever
# a new resolution is requested by the client the server will
# generate a new thumbnail. If false the server will pick a thumbnail
# from a precalculated list.
dynamic_thumbnails: false

# List of thumbnail to precalculate when an image is uploaded.
thumbnail_sizes:
- width: 32
  height: 32
  method: crop
- width: 96
  height: 96
  method: crop
- width: 320
  height: 240
  method: scale
- width: 640
  height: 480
  method: scale
- width: 800
  height: 600
  method: scale

# Is the preview URL API enabled?  If enabled, you *must* specify
# an explicit url_preview_ip_range_blacklist of IPs that the spider is
# denied from accessing.
url_preview_enabled: True

# List of IP address CIDR ranges that the URL preview spider is denied
# from accessing.  There are no defaults: you must explicitly
# specify a list for URL previewing to work.  You should specify any
# internal services in your network that you do not want synapse to try
# to connect to, otherwise anyone in any Matrix room could cause your
# synapse to issue arbitrary GET requests to your internal services,
# causing serious security issues.
#
url_preview_ip_range_blacklist:
- '127.0.0.0/8'
- '10.0.0.0/8'
- '172.16.0.0/12'
- '192.168.0.0/16'
- '100.64.0.0/10'
- '169.254.0.0/16'
- '::1/128'
- 'fe80::/64'
- 'fc00::/7'
#
# List of IP address CIDR ranges that the URL preview spider is allowed
# to access even if they are specified in url_preview_ip_range_blacklist.
# This is useful for specifying exceptions to wide-ranging blacklisted
# target IP ranges - e.g. for enabling URL previews for a specific private
# website only visible in your network.
#
# url_preview_ip_range_whitelist:
# - '192.168.1.1'

# Optional list of URL matches that the URL preview spider is
# denied from accessing.  You should use url_preview_ip_range_blacklist
# in preference to this, otherwise someone could define a public DNS
# entry that points to a private IP address and circumvent the blacklist.
# This is more useful if you know there is an entire shape of URL that
# you know that will never want synapse to try to spider.
#
# Each list entry is a dictionary of url component attributes as returned
# by urlparse.urlsplit as applied to the absolute form of the URL.  See
# https://docs.python.org/2/library/urlparse.html#urlparse.urlsplit
# The values of the dictionary are treated as an filename match pattern
# applied to that component of URLs, unless they start with a ^ in which
# case they are treated as a regular expression match.  If all the
# specified component matches for a given list item succeed, the URL is
# blacklisted.
#
# url_preview_url_blacklist:
# # blacklist any URL with a username in its URI
# - username: '*'
#
# # blacklist all *.google.com URLs
# - netloc: 'google.com'
# - netloc: '*.google.com'
#
# # blacklist all plain HTTP URLs
# - scheme: 'http'
#
# # blacklist http(s)://www.acme.com/foo
# - netloc: 'www.acme.com'
#   path: '/foo'
#
# # blacklist any URL with a literal IPv4 address
# - netloc: '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$'

# The largest allowed URL preview spidering size in bytes
max_spider_size: "10M"




## Captcha ##
# See docs/CAPTCHA_SETUP for full details of configuring this.

# This Home Server's ReCAPTCHA public key.
recaptcha_public_key: "YOUR_PUBLIC_KEY"

# This Home Server's ReCAPTCHA private key.
recaptcha_private_key: "YOUR_PRIVATE_KEY"

# Enables ReCaptcha checks when registering, preventing signup
# unless a captcha is answered. Requires a valid ReCaptcha
# public/private key.
enable_registration_captcha: False

# A secret key used to bypass the captcha test entirely.
#captcha_bypass_secret: "YOUR_SECRET_HERE"

# The API endpoint to use for verifying m.login.recaptcha responses.
recaptcha_siteverify_api: "https://www.google.com/recaptcha/api/siteverify"


## Turn ##

# The public URIs of the TURN server to give to clients
turn_uris: {{ matrix_synapse_turn_uris|to_json }}

# The shared secret used to compute passwords for the TURN server
turn_shared_secret: {{ matrix_synapse_turn_shared_secret|to_json }}

# The Username and password if the TURN server needs them and
# does not use a token
#turn_username: "TURNSERVER_USERNAME"
#turn_password: "TURNSERVER_PASSWORD"

# How long generated TURN credentials last
turn_user_lifetime: "1h"

# Whether guests should be allowed to use the TURN server.
# This defaults to True, otherwise VoIP will be unreliable for guests.
# However, it does introduce a slight security risk as it allows users to
# connect to arbitrary endpoints without having first signed up for a
# valid account (e.g. by passing a CAPTCHA).
turn_allow_guests: False


## Registration ##

# Enable registration for new users.
enable_registration: {{ matrix_synapse_enable_registration|to_json }}

# The user must provide all of the below types of 3PID when registering.
#
# registrations_require_3pid:
#     - email
#     - msisdn

# Explicitly disable asking for MSISDNs from the registration
# flow (overrides registrations_require_3pid if MSISDNs are set as required)
#
# disable_msisdn_registration = True

# Mandate that users are only allowed to associate certain formats of
# 3PIDs with accounts on this server.
#
# allowed_local_3pids:
#     - medium: email
#       pattern: '.*@matrix\.org'
#     - medium: email
#       pattern: '.*@vector\.im'
#     - medium: msisdn
#       pattern: '\+44'

# If set, allows registration by anyone who also has the shared
# secret, even if registration is otherwise disabled.
registration_shared_secret: {{ matrix_synapse_registration_shared_secret|to_json }}

# Set the number of bcrypt rounds used to generate password hash.
# Larger numbers increase the work factor needed to generate the hash.
# The default number is 12 (which equates to 2^12 rounds).
# N.B. that increasing this will exponentially increase the time required
# to register or login - e.g. 24 => 2^24 rounds which will take >20 mins.
bcrypt_rounds: 12

# Allows users to register as guests without a password/email/etc, and
# participate in rooms hosted on this server which have been made
# accessible to anonymous users.
allow_guest_access: False

# The identity server which we suggest that clients should use when users log
# in on this server.
#
# (By default, no suggestion is made, so it is left up to the client.
# This setting is ignored unless public_baseurl is also set.)
#
# default_identity_server: https://matrix.org

# The list of identity servers trusted to verify third party
# identifiers by this server.
#
# Also defines the ID server which will be called when an account is
# deactivated (one will be picked arbitrarily).
{% if matrix_synapse_trusted_third_party_id_servers|length > 0 %}
trusted_third_party_id_servers:
{{ matrix_synapse_trusted_third_party_id_servers|to_nice_yaml }}
{% endif %}

# Users who register on this homeserver will automatically be joined
# to these rooms
#auto_join_rooms:
#    - "#example:example.com"
{% if matrix_synapse_auto_join_rooms|length > 0 %}
auto_join_rooms:
{{ matrix_synapse_auto_join_rooms|to_nice_yaml }}
{% endif %}

# Where auto_join_rooms are specified, setting this flag ensures that the
# the rooms exist by creating them when the first user on the
# homeserver registers.
# Setting to false means that if the rooms are not manually created,
# users cannot be auto-joined since they do not exist.
autocreate_auto_join_rooms: {{ matrix_synapse_autocreate_auto_join_rooms }}


## Metrics ###

# Enable collection and rendering of performance metrics
enable_metrics: {{ matrix_synapse_metrics_enabled }}
report_stats: {{ matrix_synapse_report_stats|to_json }}


## API Configuration ##

# A list of event types that will be included in the room_invite_state
room_invite_state_types:
    - "m.room.join_rules"
    - "m.room.canonical_alias"
    - "m.room.avatar"
    - "m.room.encryption"
    - "m.room.name"


# A list of application service config file to use
app_service_config_files: {{ matrix_synapse_app_service_config_files }}

# Whether or not to track application service IP addresses. Implicitly
# enables MAU tracking for application service users.
track_appservice_user_ips: False


# a secret which is used to sign access tokens. If none is specified,
# the registration_shared_secret is used, if one is given; otherwise,
# a secret key is derived from the signing key.
macaroon_secret_key: {{ matrix_synapse_macaroon_secret_key|to_json }}

# Used to enable access token expiration.
expire_access_token: False

# a secret which is used to calculate HMACs for form values, to stop
# falsification of values. Must be specified for the User Consent
# forms to work.
form_secret: {{ matrix_synapse_form_secret|to_json }}

## Signing Keys ##

# Path to the signing key to sign messages with
signing_key_path: "/data/{{ matrix_server_fqn_matrix }}.signing.key"

# The keys that the server used to sign messages with but won't use
# to sign new messages. E.g. it has lost its private key
old_signing_keys: {}
#  "ed25519:auto":
#    # Base64 encoded public key
#    key: "The public part of your old signing key."
#    # Millisecond POSIX timestamp when the key expired.
#    expired_ts: 123456789123

# How long key response published by this server is valid for.
# Used to set the valid_until_ts in /key/v2 APIs.
# Determines how quickly servers will query to check which keys
# are still valid.
key_refresh_interval: "1d" # 1 Day.

# The trusted servers to download signing keys from.
perspectives:
  servers:
    "matrix.org":
      verify_keys:
        "ed25519:auto":
          key: "Noi6WqcDj0QmPxCNQqgezwTlBKrfqehY1u2FyWP9uYw"



# Enable SAML2 for registration and login. Uses pysaml2.
#
# saml2_config:
#
#   # The following is the configuration for the pysaml2 Service Provider.
#   # See pysaml2 docs for format of config.
#   #
#   # Default values will be used for the 'entityid' and 'service' settings,
#   # so it is not normally necessary to specify them unless you need to
#   # override them.
#
#   sp_config:
#     # point this to the IdP's metadata. You can use either a local file or
#     # (preferably) a URL.
#     metadata:
#       # local: ["saml2/idp.xml"]
#       remote:
#         - url: https://our_idp/metadata.xml
#
#     # The following is just used to generate our metadata xml, and you
#     # may well not need it, depending on your setup. Alternatively you
#     # may need a whole lot more detail - see the pysaml2 docs!
#
#     description: ["My awesome SP", "en"]
#     name: ["Test SP", "en"]
#
#     organization:
#       name: Example com
#       display_name:
#         - ["Example co", "en"]
#       url: "http://example.com"
#
#     contact_person:
#       - given_name: Bob
#         sur_name: "the Sysadmin"
#         email_address": ["admin@example.com"]
#         contact_type": technical
#
#   # Instead of putting the config inline as above, you can specify a
#   # separate pysaml2 configuration file:
#   #
#   # config_path: "/data/sp_conf.py"



# Enable CAS for registration and login.
#cas_config:
#   enabled: true
#   server_url: "https://cas-server.com"
#   service_url: "https://homeserver.domain.com:8448"
#   #required_attributes:
#   #    name: value


# The JWT needs to contain a globally unique "sub" (subject) claim.
#
# jwt_config:
#    enabled: true
#    secret: "a secret"
#    algorithm: "HS256"



# Enable password for login.
password_config:
   enabled: true
   # Uncomment and change to a secret random string for extra security.
   # DO NOT CHANGE THIS AFTER INITIAL SETUP!
   pepper: {{ matrix_synapse_password_config_pepper|to_json }}



# Enable sending emails for notification events
# Defining a custom URL for Riot is only needed if email notifications
# should contain links to a self-hosted installation of Riot; when set
# the "app_name" setting is ignored.
#
# If your SMTP server requires authentication, the optional smtp_user &
# smtp_pass variables should be used
#
{% if matrix_synapse_email_enabled %}
email:
   enable_notifs: true
   smtp_host: {{ matrix_synapse_email_smtp_host|to_json }}
   smtp_port: {{ matrix_synapse_email_smtp_port|to_json }}
   require_transport_security: {{ matrix_synapse_email_smtp_require_transport_security|to_json }}
   notif_from: {{ matrix_synapse_email_notif_from|to_json }}
   app_name: Matrix
   notif_template_html: notif_mail.html
   notif_template_text: notif_mail.txt
   notif_for_new_users: True
   riot_base_url: {{ matrix_synapse_email_riot_base_url|to_json }}
{% endif %}


# password_providers:
#     - module: "ldap_auth_provider.LdapAuthProvider"
#       config:
#         enabled: true
#         uri: "ldap://ldap.example.com:389"
#         start_tls: true
#         base: "ou=users,dc=example,dc=com"
#         attributes:
#            uid: "cn"
#            mail: "email"
#            name: "givenName"
#         #bind_dn:
#         #bind_password:
#         #filter: "(objectClass=posixAccount)"
{% if matrix_synapse_password_providers_enabled %}
password_providers:
{% if matrix_synapse_ext_password_provider_shared_secret_auth_enabled %}
  - module: "shared_secret_authenticator.SharedSecretAuthenticator"
    config:
      sharedSecret: {{ matrix_synapse_ext_password_provider_shared_secret_auth_shared_secret|to_json }}
{% endif %}
{% if matrix_synapse_ext_password_provider_rest_auth_enabled %}
  - module: "rest_auth_provider.RestAuthProvider"
    config:
      endpoint: {{ matrix_synapse_ext_password_provider_rest_auth_endpoint|to_json }}
      policy:
        registration:
          username:
            enforceLowercase: {{ matrix_synapse_ext_password_provider_rest_auth_registration_enforce_lowercase }}
          profile:
            name: {{ matrix_synapse_ext_password_provider_rest_auth_registration_profile_name_autofill }}
        login:
          profile:
            name: {{ matrix_synapse_ext_password_provider_rest_auth_login_profile_name_autofill }}
{% endif %}
{% if matrix_synapse_ext_password_provider_ldap_enabled %}
  - module: "ldap_auth_provider.LdapAuthProvider"
    config:
      enabled: true
      uri: {{ matrix_synapse_ext_password_provider_ldap_uri|to_json }}
      start_tls: {{ matrix_synapse_ext_password_provider_ldap_start_tls|to_json }}
      base: {{ matrix_synapse_ext_password_provider_ldap_base|to_json }}
      attributes:
        uid: {{ matrix_synapse_ext_password_provider_ldap_attributes_uid|to_json }}
        mail: {{ matrix_synapse_ext_password_provider_ldap_attributes_mail|to_json }}
        name: {{ matrix_synapse_ext_password_provider_ldap_attributes_name|to_json }}
      bind_dn: {{ matrix_synapse_ext_password_provider_ldap_bind_dn|to_json }}
      bind_password: {{ matrix_synapse_ext_password_provider_ldap_bind_password|to_json }}
      filter: {{ matrix_synapse_ext_password_provider_ldap_filter|to_json }}
{% endif %}
{% endif %}



# Clients requesting push notifications can either have the body of
# the message sent in the notification poke along with other details
# like the sender, or just the event ID and room ID (`event_id_only`).
# If clients choose the former, this option controls whether the
# notification request includes the content of the event (other details
# like the sender are still included). For `event_id_only` push, it
# has no effect.

# For modern android devices the notification content will still appear
# because it is loaded by the app. iPhone, however will send a
# notification saying only that a message arrived and who it came from.
#
#push:
#   include_content: true


# spam_checker:
#     module: "my_custom_project.SuperSpamChecker"
#     config:
#         example_option: 'things'


# Whether to allow non server admins to create groups on this server
enable_group_creation: false

# If enabled, non server admins can only create groups with local parts
# starting with this prefix
# group_creation_prefix: "unofficial/"



# User Directory configuration
#
# 'search_all_users' defines whether to search all users visible to your HS
# when searching the user directory, rather than limiting to users visible
# in public rooms.  Defaults to false.  If you set it True, you'll have to run
# UPDATE user_directory_stream_pos SET stream_id = NULL;
# on your database to tell it to rebuild the user_directory search indexes.
#
#user_directory:
#   search_all_users: false


# User Consent configuration
#
# for detailed instructions, see
# https://github.com/matrix-org/synapse/blob/master/docs/consent_tracking.md
#
# Parts of this section are required if enabling the 'consent' resource under
# 'listeners', in particular 'template_dir' and 'version'.
#
# 'template_dir' gives the location of the templates for the HTML forms.
# This directory should contain one subdirectory per language (eg, 'en', 'fr'),
# and each language directory should contain the policy document (named as
# '<version>.html') and a success page (success.html).
#
# 'version' specifies the 'current' version of the policy document. It defines
# the version to be served by the consent resource if there is no 'v'
# parameter.
#
# 'server_notice_content', if enabled, will send a user a "Server Notice"
# asking them to consent to the privacy policy. The 'server_notices' section
# must also be configured for this to work. Notices will *not* be sent to
# guest users unless 'send_server_notice_to_guests' is set to true.
#
# 'block_events_error', if set, will block any attempts to send events
# until the user consents to the privacy policy. The value of the setting is
# used as the text of the error.
#
# 'require_at_registration', if enabled, will add a step to the registration
# process, similar to how captcha works. Users will be required to accept the
# policy before their account is created.
#
# 'policy_name' is the display name of the policy users will see when registering
# for an account. Has no effect unless `require_at_registration` is enabled.
# Defaults to "Privacy Policy".
#
# user_consent:
#   template_dir: res/templates/privacy
#   version: 1.0
#   server_notice_content:
#     msgtype: m.text
#     body: >-
#       To continue using this homeserver you must review and agree to the
#       terms and conditions at %(consent_uri)s
#   send_server_notice_to_guests: True
#   block_events_error: >-
#     To continue using this homeserver you must review and agree to the
#     terms and conditions at %(consent_uri)s
#   require_at_registration: False
#   policy_name: Privacy Policy
#


# Server Notices room configuration
#
# Uncomment this section to enable a room which can be used to send notices
# from the server to users. It is a special room which cannot be left; notices
# come from a special "notices" user id.
#
# If you uncomment this section, you *must* define the system_mxid_localpart
# setting, which defines the id of the user which will be used to send the
# notices.
#
# It's also possible to override the room name, the display name of the
# "notices" user, and the avatar for the user.
#
# server_notices:
#   system_mxid_localpart: notices
#   system_mxid_display_name: "Server Notices"
#   system_mxid_avatar_url: "mxc://server.com/oumMVlgDnLYFaPVkExemNVVZ"
#   room_name: "Server Notices"



# The `alias_creation` option controls who's allowed to create aliases
# on this server.
#
# The format of this option is a list of rules that contain globs that
# match against user_id and the new alias (fully qualified with server
# name). The action in the first rule that matches is taken, which can
# currently either be "allow" or "deny".
#
# If no rules match the request is denied.
alias_creation_rules:
    - user_id: "*"
      alias: "*"
      action: allow
