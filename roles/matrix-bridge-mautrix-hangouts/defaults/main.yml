# mautrix-hangouts is a Matrix <-> Hangouts bridge
# See: https://github.com/tulir/mautrix-hangouts

matrix_mautrix_hangouts_enabled: true

matrix_mautrix_hangouts_container_image_self_build: false

# See: https://mau.dev/tulir/mautrix-hangouts/container_registry
matrix_mautrix_hangouts_docker_image: "dock.mau.dev/tulir/mautrix-hangouts:latest"
matrix_mautrix_hangouts_docker_image_force_pull: "{{ matrix_mautrix_hangouts_docker_image.endswith(':latest') }}"

matrix_mautrix_hangouts_base_path: "{{ matrix_base_data_path }}/mautrix-hangouts"
matrix_mautrix_hangouts_config_path: "{{ matrix_mautrix_hangouts_base_path }}/config"
matrix_mautrix_hangouts_data_path: "{{ matrix_mautrix_hangouts_base_path }}/data"
matrix_mautrix_hangouts_docker_src_files_path: "{{ matrix_mautrix_hangouts_base_path }}/docker-src"

matrix_mautrix_hangouts_public_endpoint: '/mautrix-hangouts'

matrix_mautrix_hangouts_homeserver_address: 'http://matrix-synapse:8008'
matrix_mautrix_hangouts_homeserver_domain: '{{ matrix_domain }}'
matrix_mautrix_hangouts_appservice_address: 'http://matrix-mautrix-hangouts:8080'

# A list of extra arguments to pass to the container
matrix_mautrix_hangouts_container_extra_arguments: []

# List of systemd services that matrix-mautrix-hangouts.service depends on.
matrix_mautrix_hangouts_systemd_required_services_list: ['docker.service']

# List of systemd services that matrix-mautrix-hangouts.service wants
matrix_mautrix_hangouts_systemd_wanted_services_list: []

matrix_mautrix_hangouts_appservice_token: ''
matrix_mautrix_hangouts_homeserver_token: ''

# Can be set to enable automatic double-puppeting via Shared Secret Auth (https://github.com/devture/matrix-synapse-shared-secret-auth).
matrix_mautrix_hangouts_login_shared_secret: ''

# Default configuration template which covers the generic use case.
# You can customize it by controlling the various variables inside it.
#
# For a more advanced customization, you can extend the default (see `matrix_mautrix_hangouts_configuration_extension_yaml`)
# or completely replace this variable with your own template.
matrix_mautrix_hangouts_configuration_yaml: |
  #jinja2: lstrip_blocks: "True"
  # Homeserver details
  homeserver:
      # The address that this appservice can use to connect to the homeserver.
      address: {{ matrix_mautrix_hangouts_homeserver_address }}
      # The domain of the homeserver (for MXIDs, etc).
      domain: {{ matrix_mautrix_hangouts_homeserver_domain }}
      # Whether or not to verify the SSL certificate of the homeserver.
      # Only applies if address starts with https://
      verify_ssl: true

  # Application service host/registration related details
  # Changing these values requires regeneration of the registration.
  appservice:
      # The address that the homeserver can use to connect to this appservice.
      address: {{ matrix_mautrix_hangouts_appservice_address }}

      # The hostname and port where this appservice should listen.
      hostname: 0.0.0.0
      port: 8080
      # The maximum body size of appservice API requests (from the homeserver) in mebibytes
      # Usually 1 is enough, but on high-traffic bridges you might need to increase this to avoid 413s
      max_body_size: 1

      # The full URI to the database. SQLite and Postgres are fully supported.
      # Other DBMSes supported by SQLAlchemy may or may not work.
      # Format examples:
      #   SQLite:   sqlite:///filename.db
      #   Postgres: postgres://username:password@hostname/dbname
      database: sqlite:////data/mautrix-hangouts.db

      # The unique ID of this appservice.
      id: hangouts
      # Username of the appservice bot.
      bot_username: hangoutsbot
      # Display name and avatar for bot. Set to "remove" to remove display name/avatar, leave empty
      # to leave display name/avatar as-is.
      bot_displayname: Hangouts bridge bot
      bot_avatar: mxc://maunium.net/FBXZnpfORkBEruORbikmleAy

      # Authentication tokens for AS <-> HS communication.
      as_token: "{{ matrix_mautrix_hangouts_appservice_token }}"
      hs_token: "{{ matrix_mautrix_hangouts_homeserver_token }}"

  # Bridge config
  bridge:
      # Localpart template of MXIDs for Hangouts users.
      # {userid} is replaced with the user ID of the Hangouts user.
      username_template: "hangouts_{userid}"
      # Displayname template for Hangouts users.
      # {displayname} is replaced with the display name of the Hangouts user
      #               as defined below in displayname_preference.
      # Keys available for displayname_preference are also available here.
      displayname_template: '{full_name} (Hangouts)'
      # Available keys:
      # "name" (full name)
      # "first_name"
      # "last_name"
      # "nickname"
      # "own_nickname" (user-specific!)
      displayname_preference:
      - name

      # The prefix for commands. Only required in non-management rooms.
      command_prefix: "!HO"

      # Number of chats to sync (and create portals for) on startup/login.
      # Maximum 20, set 0 to disable automatic syncing.
      initial_chat_sync: 20
      # Whether or not the Hangouts users of logged in Matrix users should be
      # invited to private chats when the user sends a message from another client.
      invite_own_puppet_to_pm: false
      # Whether or not to use /sync to get presence, read receipts and typing notifications when using
      # your own Matrix account as the Matrix puppet for your Hangouts account.
      sync_with_custom_puppets: true
      # Shared secret for https://github.com/devture/matrix-synapse-shared-secret-auth
      #
      # If set, custom puppets will be enabled automatically for local users
      # instead of users having to find an access token and run `login-matrix`
      # manually.
      login_shared_secret: {{ matrix_mautrix_hangouts_login_shared_secret|to_json }}
      # Whether or not to update avatars when syncing all contacts at startup.
      update_avatar_initial_sync: true
      # End-to-bridge encryption support options. These require matrix-nio to be installed with pip
      # and login_shared_secret to be configured in order to get a device for the bridge bot.
      #
      # Additionally, https://github.com/matrix-org/synapse/pull/5758 is required if using a normal
      # application service.
      encryption:
          # Allow encryption, work in group chat rooms with e2ee enabled
          allow: false
          # Default to encryption, force-enable encryption in all portals the bridge creates
          # This will cause the bridge bot to be in private chats for the encryption to work properly.
          default: false

      # Public website and API configs
      web:
          # Auth server config
          auth:
              # Publicly accessible base URL for the login endpoints.
              # The prefix below is not implicitly added. This URL and all subpaths should be proxied
              # or otherwise pointed to the appservice's webserver to the path specified below (prefix).
              # This path should usually include a trailing slash.
              # Internal prefix in the appservice web server for the login endpoints.
              public: "{{ matrix_homeserver_url }}{{ matrix_mautrix_hangouts_public_endpoint }}/login"
              prefix: "{{ matrix_mautrix_hangouts_public_endpoint }}/login"


      # Permissions for using the bridge.
      # Permitted values:
      #       user - Use the bridge with puppeting.
      #      admin - Use and administrate the bridge.
      # Permitted keys:
      #        * - All Matrix users
      #   domain - All users on that homeserver
      #     mxid - Specific user
      permissions:
        '{{ matrix_mautrix_hangouts_homeserver_domain }}': user

  # Python logging configuration.
  #
  # See section 16.7.2 of the Python documentation for more info:
  # https://docs.python.org/3.6/library/logging.config.html#configuration-dictionary-schema
  logging:
      version: 1
      formatters:
          colored:
              (): mautrix_hangouts.util.ColorFormatter
              format: "[%(asctime)s] [%(levelname)s@%(name)s] %(message)s"
          normal:
              format: "[%(asctime)s] [%(levelname)s@%(name)s] %(message)s"
      handlers:
          console:
              class: logging.StreamHandler
              formatter: colored
      loggers:
          mau:
              level: DEBUG
          hangups:
              level: DEBUG
          aiohttp:
              level: INFO
      root:
          level: DEBUG
          handlers: [console]

matrix_mautrix_hangouts_configuration_extension_yaml: |
  # Your custom YAML configuration goes here.
  # This configuration extends the default starting configuration (`matrix_mautrix_hangouts_configuration_yaml`).
  #
  # You can override individual variables from the default configuration, or introduce new ones.
  #
  # If you need something more special, you can take full control by
  # completely redefining `matrix_mautrix_hangouts_configuration_yaml`.

matrix_mautrix_hangouts_configuration_extension: "{{ matrix_mautrix_hangouts_configuration_extension_yaml|from_yaml if matrix_mautrix_hangouts_configuration_extension_yaml|from_yaml is mapping else {} }}"

# Holds the final configuration (a combination of the default and its extension).
# You most likely don't need to touch this variable. Instead, see `matrix_mautrix_hangouts_configuration_yaml`.
matrix_mautrix_hangouts_configuration: "{{ matrix_mautrix_hangouts_configuration_yaml|from_yaml|combine(matrix_mautrix_hangouts_configuration_extension, recursive=True) }}"

matrix_mautrix_hangouts_registration_yaml: |
  id: hangouts
  as_token: "{{ matrix_mautrix_hangouts_appservice_token }}"
  hs_token: "{{ matrix_mautrix_hangouts_homeserver_token }}"
  namespaces:
    users:
    - exclusive: true
      regex: '^@hangouts_.+:{{ matrix_mautrix_hangouts_homeserver_domain|regex_escape }}$'
  url: {{ matrix_mautrix_hangouts_appservice_address }}
  sender_localpart: hangoutsbot
  rate_limited: false

matrix_mautrix_hangouts_registration: "{{ matrix_mautrix_hangouts_registration_yaml|from_yaml }}"
