#jinja2: lstrip_blocks: "True"
# Homeserver details.
homeserver:
    # The address that this appservice can use to connect to the homeserver.
    address: {{ matrix_beeper_linkedin_homeserver_address }}
    # The domain of the homeserver (for MXIDs, etc).
    domain: {{ matrix_beeper_linkedin_homeserver_domain }}
    # Whether or not to verify the SSL certificate of the homeserver.
    # Only applies if address starts with https://
    verify_ssl: true
    # Whether or not the homeserver supports asmux-specific endpoints,
    # such as /_matrix/client/unstable/net.maunium.asmux/dms for atomically
    # updating m.direct.
    asmux: false
    # Number of retries for all HTTP requests if the homeserver isn't reachable.
    http_retry_count: 4


appservice:
    # The address that the homeserver can use to connect to this appservice.
    address: {{ matrix_beeper_linkedin_appservice_address }}

    # The hostname and port where this appservice should listen.
    hostname: 0.0.0.0
    port: 29319

    # The maximum body size of appservice API requests (from the homeserver) in mebibytes
    # Usually 1 is enough, but on high-traffic bridges you might need to increase this to avoid 413s
    max_body_size: 1

    # The full URI to the database. Only Postgres is currently supported.
    database: {{ matrix_beeper_linkedin_appservice_database_uri|to_json }}
    # Additional arguments for asyncpg.create_pool()
    # https://magicstack.github.io/asyncpg/current/api/index.html#asyncpg.pool.create_pool
    database_opts:
        min_size: 5
        max_size: 10

    # Provisioning API part of the web server for automated portal creation and fetching information.
    # Used by things like mautrix-manager (https://github.com/tulir/mautrix-manager).
    provisioning:
        # Whether or not the provisioning API should be enabled.
        enabled: true
        # The prefix to use in the provisioning API endpoints.
        prefix: /_matrix/provision/v1
        # The shared secret to authorize users of the API.
        # Set to "generate" to generate and save a new token.
        shared_secret: generate

    # The unique ID of this appservice.
    id: beeper_linkedin
    # Appservice bot details.
    bot:
        # Username of the appservice bot.
        username: {{ matrix_beeper_linkedin_appservice_bot_username|to_json }}
        # Display name and avatar for bot. Set to "remove" to remove display name/avatar, leave empty
        # to leave display name/avatar as-is.
        displayname: LinkedIn bridge bot
        avatar: mxc://sumnerevans.com/XMtwdeUBnxYvWNFFrfeTSHqB

    # Whether or not to receive ephemeral events via appservice transactions.
    # Requires MSC2409 support (i.e. Synapse 1.22+).
    # You should disable bridge -> sync_with_custom_puppets when this is enabled.
    ephemeral_events: false

    # Authentication tokens for AS <-> HS communication. Autogenerated; do not modify.
    as_token: "{{ matrix_beeper_linkedin_appservice_token }}"
    hs_token: "{{ matrix_beeper_linkedin_homeserver_token }}"


# Prometheus telemetry config. Requires prometheus-client to be installed.
metrics:
    enabled: false
    listen_port: 8000

# Manhole config.
manhole:
    # Whether or not opening the manhole is allowed.
    enabled: false
    # The path for the unix socket.
    path: /var/tmp/linkedin-matrix.manhole
    # The list of UIDs who can be added to the whitelist.
    # If empty, any UIDs can be specified in the open-manhole command.
    whitelist:
    - 0


# Bridge config
bridge:
    # Localpart template of MXIDs for LinkedIn  users.
    username_template: "linkedin_{userid}"
    # Displayname template for LinkedIn users.
    # Localpart template for per-user room grouping community IDs.
    # The bridge will create these communities and add all of the specific user's portals to the community.
    # {localpart} is the MXID localpart and {server} is the MXID server part of the user.
    # (Note that, by default, non-admins might not have your homeserver's permission to create
    # communities. You should set `enable_group_creation: true` in homeserver.yaml to fix this.)
    # `linkedin_{localpart}={server}` is a good value.
    community_template: null

    # Displayname template for LinkedIn users.
    # {displayname} is replaced with the display name of the LinkedIn user
    #               as defined below in displayname_preference.
    # Keys available for displayname_preference are also available here.
    displayname_template: "{displayname} (LinkedIn)"

    # Number of chats to sync (and create portals for) on startup/login.
    # Set 0 to disable automatic syncing.
    initial_chat_sync: 10

    # Whether or not the LinkedIn users of logged in Matrix users should be
    # invited to private chats when the user sends a message from another client.
    invite_own_puppet_to_pm: false
    # Whether or not to use /sync to get presence, read receipts and typing notifications
    # when double puppeting is enabled
    sync_with_custom_puppets: true
    # Whether or not to update the m.direct account data event when double puppeting is enabled.
    # Note that updating the m.direct event is not atomic (except with mautrix-asmux)
    # and is therefore prone to race conditions.
    sync_direct_chat_list: false
    # Servers to always allow double puppeting from
    double_puppet_server_map: {}
    #    example.com: https://example.com
    # Allow using double puppeting from any server with a valid client .well-known file.

    # Maximum number of seconds since last message in chat to skip
    # syncing the chat in any case. This setting will take priority
    # over both recovery_chat_sync_limit and initial_chat_sync_count.
    # Default is 3 days = 259200 seconds
    sync_max_chat_age: 259200

    # Whether or not to sync with custom puppets to receive EDUs that
    # are not normally sent to appservices.
    sync_with_custom_puppets: true
    # Shared secret for https://github.com/devture/matrix-synapse-shared-secret-auth
    #
    # If set, custom puppets will be enabled automatically for local users
    # instead of users having to find an access token and run `login-matrix`
    # manually.
    login_shared_secret: {{ matrix_beeper_linkedin_login_shared_secret|to_json }}

    # Allow using double puppeting from any server with a valid client .well-known file.
    double_puppet_allow_discovery: false

    # Whether or not to bridge presence in both directions. LinkedIn allows users not to broadcast
    # presence, but then it won't send other users' presence to the client.
    presence: {{ matrix_beeper_linkedin_bridge_presence|to_json }}
    # Whether or not to update avatars when syncing all contacts at startup.
    update_avatar_initial_sync: true


    # End-to-bridge encryption support options. These require matrix-nio to be installed with pip
    # and login_shared_secret to be configured in order to get a device for the bridge bot.
    #
    # Additionally, https://github.com/matrix-org/synapse/pull/5758 is required if using a normal
    # application service.
    encryption:
        # Allow encryption, work in group chat rooms with e2ee enabled
        allow: false
        # Default to encryption, force-enable encryption in all portals the bridge creates
        # This will cause the bridge bot to be in private chats for the encryption to work properly.
        default: false
        # Options for automatic key sharing.
        key_sharing:
            # Enable key sharing? If enabled, key requests for rooms where users are in will be fulfilled.
            # You must use a client that supports requesting keys from other users to use this feature.
            allow: false
            # Require the requesting device to have a valid cross-signing signature?
            # This doesn't require that the bridge has verified the device, only that the user has verified it.
            # Not yet implemented.
            require_cross_signing: false
            # Require devices to be verified by the bridge?
            # Verification by the bridge is not yet implemented.
            require_verification: true
    # Whether or not the bridge should send a read receipt from the bridge bot when a message has
    # been sent to LinkedIn.
    delivery_receipts: false
    # Whether to allow inviting arbitrary mxids to portal rooms
    allow_invites: false

    # Settings for backfilling messages from LinkedIn.
    backfill:
        # Whether or not the LinkedIn users of logged in Matrix users should be
        # invited to private chats when backfilling history from LinkedIn. This is
        # usually needed to prevent rate limits and to allow timestamp massaging.
        invite_own_puppet: true
        # Maximum number of messages to backfill initially.
        # Set to 0 to disable backfilling when creating portal.
        initial_limit: 0
        # Maximum number of messages to backfill if messages were missed while
        # the bridge was disconnected.
        # Set to 0 to disable backfilling missed messages.
        missed_limit: 1000
        # If using double puppeting, should notifications be disabled
        # while the initial backfill is in progress?
        disable_notifications: false
    periodic_reconnect:
        # TODO needed?
        # Interval in seconds in which to automatically reconnect all users.
        # This can be used to automatically mitigate the bug where Linkedin stops sending messages.
        # Set to -1 to disable periodic reconnections entirely.
        interval: -1
        # What to do in periodic reconnects. Either "refresh" or "reconnect"
        mode: refresh
        # Should even disconnected users be reconnected?
        always: false
    # The number of seconds that a disconnection can last without triggering an automatic re-sync
    # and missed message backfilling when reconnecting.
    # Set to 0 to always re-sync, or -1 to never re-sync automatically.
    resync_max_disconnected_time: 5
    # Whether or not temporary disconnections should send notices to the notice room.
    # If this is false, disconnections will never send messages and connections will only send
    # messages if it was disconnected for more than resync_max_disconnected_time seconds.
    temporary_disconnect_notices: true
    # Whether or not the bridge should try to "refresh" the connection if a normal reconnection
    # attempt fails.
    refresh_on_reconnection_fail: false
    # Set this to true to tell the bridge to re-send m.bridge events to all rooms on the next run.
    # This field will automatically be changed back to false after it,
    # except if the config file is not writable.
    resend_bridge_info: false
    # When using double puppeting, should muted chats be muted in Matrix?
    mute_bridging: false
    # Whether or not mute status and tags should only be bridged when the portal room is created.
    tag_only_on_create: true


    # The prefix for commands. Only required in non-management rooms.
    command_prefix: "{{ matrix_beeper_linkedin_command_prefix }}"

    # Permissions for using the bridge.
    # Permitted values:
    #     user - Access to use the bridge to chat with a Linkedin account.
    #    admin - User level and some additional administration tools
    # Permitted keys:
    #        * - All Matrix users
    #   domain - All users on that homeserver
    #     mxid - Specific user
    permissions: {{ matrix_beeper_linkedin_bridge_permissions|to_json }}



# Logging config.
logging:
    version: 1
    formatters:
        colored:
            (): mautrix.util.logging.color.ColorFormatter
            format: "[%(asctime)s] [%(levelname)s@%(name)s] %(message)s"
        normal:
            format: "[%(asctime)s] [%(levelname)s@%(name)s] %(message)s"
    handlers:
        console:
            class: logging.StreamHandler
            formatter: colored
    loggers:
        mau:
            level: {{ matrix_beeper_linkedin_logging_level|to_json }}
        paho:
            level: {{ matrix_beeper_linkedin_logging_level|to_json }}
        aiohttp:
            level: {{ matrix_beeper_linkedin_logging_level|to_json }}
    root:
        level: {{ matrix_beeper_linkedin_logging_level|to_json }}
        handlers: [console]

