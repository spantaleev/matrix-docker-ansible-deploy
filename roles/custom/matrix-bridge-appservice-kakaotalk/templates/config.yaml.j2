# Homeserver details
homeserver:
    # The address that this appservice can use to connect to the homeserver.
    address: {{ matrix_appservice_kakaotalk_homeserver_address | to_json }}
    # The domain of the homeserver (for MXIDs, etc).
    domain: {{ matrix_appservice_kakaotalk_homeserver_domain | to_json }}
    # Whether or not to verify the SSL certificate of the homeserver.
    # Only applies if address starts with https://
    verify_ssl: true
    # Whether or not the homeserver supports asmux-specific endpoints,
    # such as /_matrix/client/unstable/net.maunium.asmux/dms for atomically
    # updating m.direct.
    asmux: false
    # Number of retries for all HTTP requests if the homeserver isn't reachable.
    http_retry_count: 4
    # The URL to push real-time bridge status to.
    # If set, the bridge will make POST requests to this URL whenever a user's MQTT connection state changes.
    # The bridge will use the appservice as_token to authorize requests.
    status_endpoint: null
    # Endpoint for reporting per-message status.
    message_send_checkpoint_endpoint: null
    # Whether asynchronous uploads via MSC2246 should be enabled for media.
    # Requires a media repo that supports MSC2246.
    async_media: false

# Application service host/registration related details
# Changing these values requires regeneration of the registration.
appservice:
    # The address that the homeserver can use to connect to this appservice.
    address: {{ matrix_appservice_kakaotalk_appservice_address | to_json }}

    # The hostname and port where this appservice should listen.
    hostname: 0.0.0.0
    port: 11115
    # The maximum body size of appservice API requests (from the homeserver) in mebibytes
    # Usually 1 is enough, but on high-traffic bridges you might need to increase this to avoid 413s
    max_body_size: 1

    # The full URI to the database. SQLite and Postgres are supported.
    # Format examples:
    #   SQLite:   sqlite:///filename.db
    #   Postgres: postgres://username:password@hostname/dbname
    database: {{ matrix_appservice_kakaotalk_appservice_database | to_json }}
    # Additional arguments for asyncpg.create_pool() or sqlite3.connect()
    # https://magicstack.github.io/asyncpg/current/api/index.html#asyncpg.pool.create_pool
    # https://docs.python.org/3/library/sqlite3.html#sqlite3.connect
    # For sqlite, min_size is used as the connection thread pool size and max_size is ignored.
    database_opts:
        min_size: 5
        max_size: 10

    # The unique ID of this appservice.
    id: appservice-kakaotalk
    # Username of the appservice bot.
    bot_username: {{ matrix_appservice_kakaotalk_appservice_bot_username | to_json }}
    # Display name and avatar for bot. Set to "remove" to remove display name/avatar, leave empty
    # to leave display name/avatar as-is.
    bot_displayname: KakaoTalk bridge bot
    bot_avatar:

    # Whether or not to receive ephemeral events via appservice transactions.
    # Requires MSC2409 support (i.e. Synapse 1.22+).
    # You should disable bridge -> sync_with_custom_puppets when this is enabled.
    ephemeral_events: false

    # Authentication tokens for AS <-> HS communication. Autogenerated; do not modify.
    as_token: {{ matrix_appservice_kakaotalk_appservice_token | to_json }}
    hs_token: {{ matrix_appservice_kakaotalk_homeserver_token | to_json }}

# Prometheus telemetry config. Requires prometheus-client to be installed.
metrics:
    enabled: false
    listen_port: 8000

# Manhole config.
manhole:
    # Whether or not opening the manhole is allowed.
    enabled: false
    # The path for the unix socket.
    path: /var/tmp/matrix-appservice-kakaotalk.manhole
    # The list of UIDs who can be added to the whitelist.
    # If empty, any UIDs can be specified in the open-manhole command.
    whitelist:
    - 0

# Config for things that are directly sent to KakaoTalk.
kakaotalk:
    device_name: "KakaoTalk Bridge"

# Bridge config
bridge:
    # Localpart template of MXIDs for KakaoTalk users.
    # {userid} is replaced with the user ID of the KakaoTalk user.
    username_template: "{{ matrix_appservice_kakaotalk_user_prefix }}{userid}"
    # Displayname template for KakaoTalk users.
    # {displayname} is replaced with the display name of the KakaoTalk user.
    displayname_template: "{displayname} (KT)"

    # The prefix for commands. Only required in non-management rooms.
    command_prefix: {{ matrix_appservice_kakaotalk_command_prefix | to_json }}

    # Number of chats to sync (and create portals for) on startup/login.
    # Set to 0 to disable automatic syncing, or -1 to sync as much as possible.
    initial_chat_sync: 20
    # Whether or not the KakaoTalk users of logged in Matrix users should be
    # invited to private chats when the user sends a message from another client.
    invite_own_puppet_to_pm: false
    # Whether or not to use /sync to get presence, read receipts and typing notifications
    # when double puppeting is enabled
    sync_with_custom_puppets: true
    # Whether or not to update the m.direct account data event when double puppeting is enabled.
    # Note that updating the m.direct event is not atomic (except with mautrix-asmux)
    # and is therefore prone to race conditions.
    sync_direct_chat_list: false
    # Servers to always allow double puppeting from
    double_puppet_server_map: {}
    # Allow using double puppeting from any server with a valid client .well-known file.
    double_puppet_allow_discovery: false
    # Shared secrets for https://github.com/devture/matrix-synapse-shared-secret-auth
    #
    # If set, custom puppets will be enabled automatically for local users
    # instead of users having to find an access token and run `login-matrix`
    # manually.
    # If using this for other servers than the bridge's server,
    # you must also set the URL in the double_puppet_server_map.
    login_shared_secret_map: {{ matrix_appservice_kakaotalk_bridge_login_shared_secret_map | to_json }}
    # Whether or not to update avatars when syncing all contacts at startup.
    update_avatar_initial_sync: true
    # End-to-bridge encryption support options. These require matrix-nio to be installed with pip
    # and login_shared_secret to be configured in order to get a device for the bridge bot.
    #
    # Additionally, https://github.com/matrix-org/synapse/pull/5758 is required if using a normal
    # application service.
    encryption:
        # Allow encryption, work in group chat rooms with e2ee enabled
        allow: {{ matrix_appservice_kakaotalk_bridge_encryption_allow | to_json }}
        # Default to encryption, force-enable encryption in all portals the bridge creates
        # This will cause the bridge bot to be in private chats for the encryption to work properly.
        default: {{ matrix_appservice_kakaotalk_bridge_encryption_default| to_json }}
        # Options for automatic key sharing.
        key_sharing:
            # Enable key sharing? If enabled, key requests for rooms where users are in will be fulfilled.
            # You must use a client that supports requesting keys from other users to use this feature.
            allow: false
            # Require the requesting device to have a valid cross-signing signature?
            # This doesn't require that the bridge has verified the device, only that the user has verified it.
            # Not yet implemented.
            require_cross_signing: false
            # Require devices to be verified by the bridge?
            # Verification by the bridge is not yet implemented.
            require_verification: true
    # Whether or not the bridge should send a read receipt from the bridge bot when a message has
    # been sent to KakaoTalk.
    delivery_receipts: false
    # Whether to allow inviting arbitrary mxids to portal rooms
    allow_invites: false
    # Whether or not created rooms should have federation enabled.
    # If false, created portal rooms will never be federated.
    federate_rooms: {{ matrix_appservice_kakaotalk_federate_rooms | to_json }}
    # Settings for backfilling messages from KakaoTalk.
    backfill:
        # Whether or not the KakaoTalk users of logged in Matrix users should be
        # invited to private chats when backfilling history from KakaoTalk. This is
        # usually needed to prevent rate limits and to allow timestamp massaging.
        invite_own_puppet: true
        # Maximum number of messages to backfill initially.
        # Set to 0 to disable backfilling when creating portal, or -1 to backfill as much as possible.
        initial_limit: 0
        # Maximum number of messages to backfill if messages were missed while
        # the bridge was disconnected.
        # Set to 0 to disable backfilling missed messages, or -1 to backfill as much as possible.
        missed_limit: 1000
        # If using double puppeting, should notifications be disabled
        # while the initial backfill is in progress?
        disable_notifications: false
    # The number of seconds that a disconnection can last without triggering an automatic re-sync
    # and missed message backfilling when reconnecting.
    # Set to 0 to always re-sync, or -1 to never re-sync automatically.
    resync_max_disconnected_time: 5
    # Should users remain logged in after being disconnected from chatroom updates?
    # This is a convenience feature, but might make the bridge look more suspicious to KakaoTalk.
    remain_logged_in_on_disconnect: true
    # May the bridge restore user logins with session tokens instead of requiring a password?
    # This is a convenience feature, but might make the bridge look more suspicious to KakaoTalk.
    # Note that password-based login will be tried first for users who have saved their password.
    allow_token_relogin: true
    # Should the bridge connect users to chatroom updates after a token-based login?
    # This will disconnect any KakaoTalk PC/bridge sessions that were started since the last connection.
    # This is a convenience feature, but might make the bridge look more suspicious to KakaoTalk.
    reconnect_on_token_relogin: true
    # Should the bridge do a resync for connected users on startup?
    sync_on_startup: true
    # Whether or not temporary disconnections should send notices to the notice room.
    # If this is false, disconnections will never send messages and connections will only send
    # messages if it was disconnected for more than resync_max_disconnected_time seconds.
    temporary_disconnect_notices: true
    # Disable bridge notices entirely
    disable_bridge_notices: false
    # Set this to true to tell the bridge to re-send m.bridge events to all rooms on the next run.
    # This field will automatically be changed back to false after it,
    # except if the config file is not writable.
    resend_bridge_info: false
    # Whether or not mute status and tags should only be bridged when the portal room is created.
    tag_only_on_create: true
    # If set to true, downloading media from the CDN will use a plain aiohttp client without the usual headers or
    # other configuration. This may be useful if you don't want to use the default proxy for large files.
    sandbox_media_download: false

    # Permissions for using the bridge.
    # Permitted values:
    #      relay - Allowed to be relayed through the bridge, no access to commands.
    #       user - Use the bridge with puppeting.
    #      admin - Use and administrate the bridge.
    # Permitted keys:
    #        * - All Matrix users
    #   domain - All users on that homeserver
    #     mxid - Specific user
    permissions: {{ matrix_appservice_kakaotalk_bridge_permissions | to_json }}

    relay:
        # Whether relay mode should be allowed. If allowed, `!kt set-relay` can be used to turn any
        # authenticated user into a relaybot for that chat.
        enabled: {{ matrix_appservice_kakaotalk_bridge_relay_enabled }}
        # The formats to use when sending messages to KakaoTalk via a relay user.
        #
        # Available variables:
        #   $sender_displayname - The display name of the sender (e.g. Example User)
        #   $sender_username    - The username (Matrix ID localpart) of the sender (e.g. exampleuser)
        #   $sender_mxid        - The Matrix ID of the sender (e.g. @exampleuser:example.com)
        #   $message            - The message content
        message_formats:
            m.text: '<b>$sender_displayname</b>: $message'
            m.notice: '<b>$sender_displayname</b>: $message'
            m.emote: '* <b>$sender_displayname</b> $message'
            m.file: 'File from <b>$sender_displayname</b>: $message'
            m.image: 'Image from <b>$sender_displayname</b>: $message'
            m.audio: 'Audio from <b>$sender_displayname</b>: $message'
            m.video: 'Video from <b>$sender_displayname</b>: $message'
            m.location: '<b>$sender_displayname</b> sent a location'

rpc:
    connection:
        # Either unix or tcp
        type: tcp
        # Only for type: unix
        # path: /rpc/rpc.sock
        # Only for type: tcp
        host: matrix-appservice-kakaotalk-node
        port: 8000

# Python logging configuration.
#
# See section 16.7.2 of the Python documentation for more info:
# https://docs.python.org/3.6/library/logging.config.html#configuration-dictionary-schema
logging:
    version: 1
    formatters:
        colored:
            (): matrix_appservice_kakaotalk.util.ColorFormatter
            format: "[%(asctime)s] [%(levelname)s@%(name)s] %(message)s"
        normal:
            format: "[%(asctime)s] [%(levelname)s@%(name)s] %(message)s"
    handlers:
        console:
            class: logging.StreamHandler
            formatter: colored
    loggers:
        mau:
            level: {{ matrix_appservice_kakaotalk_logging_level | to_json }}
        paho:
            level: {{ matrix_appservice_kakaotalk_logging_level | to_json }}
        aiohttp:
            level: {{ matrix_appservice_kakaotalk_logging_level | to_json }}
    root:
        level: {{ matrix_appservice_kakaotalk_logging_level | to_json }}
        handlers: [console]
